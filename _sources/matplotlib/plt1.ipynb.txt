{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hide the box around graphs\n",
    "------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.style.use({'axes.spines.top': False, 'axes.spines.right': False})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bar Graphs\n",
    "---------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a sample [bar graph](https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.bar) in matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "We'll start by creating some mock data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "xvalues = np.arange(4) + 0.5\n",
    "data = np.arange(1, 5)\n",
    "sem = [np.zeros(4), 0.5 * np.ones(4)]\n",
    "labels = ['A', 'B', 'C', 'D']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now the plot. Note that there are only upper bounds on the error bars because zeros were passed for the lower values by defining sem as a list with two sets of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAEWCAYAAABliCz2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAE/tJREFUeJzt3Xts1fX9x/HXl5Zpx3VUW6i9Ccit2Na241KFnlY2cUGm\ng2GR60QbEs3CiMtI5uKZQxwYDQS2LGcjzlsKkcW7qzG2naAyqRMdNODYKD20QA8stW1GWXv62R+E\n85Of4oG23357+nk+kiae02+/n/f5pj77zZdzcYwxRgCAAW+Q1wMAAPoGwQcASxB8ALAEwQcASxB8\nALAEwQcASxB8ALAEwceAl5mZqYSEBA0bNkwjR45UYWGhfve736mrq8vr0YA+RfBhhddee02tra06\nduyY1q1bp40bN2rVqlVejwX0KYIPq4wYMULz58/Xzp079cwzz+jAgQM6d+6cHnroIaWnpys5OVmr\nV6/W2bNnJUnV1dVKTU3Vpk2blJSUpDFjxujll1/Wm2++qQkTJmjUqFHasGFDZP/nzp3TmjVrlJKS\nopSUFK1Zs0bnzp3z6uECFyH4sNK0adOUmpqq3bt3a926dfrss8+0f/9+HTlyRA0NDXr00Ucj2548\neVLt7e2R+++//349//zz+uijj7R792796le/0tGjRyVJjz32mPbu3av9+/frk08+0Ycffqj169d7\n9TCBixlggMvIyDBvv/32l+6fPn26Wb9+vfnmN79pjhw5Ern//fffN5mZmcYYY6qqqszVV19tOjs7\njTHGtLS0GElm7969ke3z8vLMSy+9ZIwxZuzYseaNN96IfK+iosJkZGS48bCAKxbv9R8cwCsNDQ3q\n7OzUf/7zH+Xn50fuN8YoHA5HbicmJiouLk6SlJCQIElKTk6OfD8hIUFtbW2SpMbGRmVkZES+l5GR\nocbGRlcfB3C5uKQDK+3bt08NDQ268847lZCQoIMHD6q5uVnNzc36/PPPIwG/UikpKTp27Fjkdn19\nvVJSUnprbKBHCD6s0tLSotdff12lpaVaunSpcnJydP/99+snP/mJmpqaJJ0/83/rrbe6tf/Fixdr\n/fr1CoVCOn36tB599FEtXbq0Nx8C0G0EH1a44447NGzYMKWlpemxxx7T2rVr9fTTT0uSNm7cqPHj\nx2vGjBkaPny45syZo8OHD3drnYcfflgFBQXKzs7WjTfeqLy8PD388MO9+VCAbnOM4QNQAMAGnOED\n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\n/wMc6VJdHqeWagAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa9e5cf5e48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(xvalues, data, yerr=sem, tick_label=labels,\n",
    "        color='y', edgecolor='k', capsize=10)\n",
    "plt.xlabel('condition')\n",
    "plt.ylabel('value')\n",
    "plt.title('Demo')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (Spyder)",
   "language": "python3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
