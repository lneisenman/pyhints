{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hide the box around graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "plt.style.use({'axes.spines.top': False, 'axes.spines.right': False})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bar Graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a sample [bar graph](https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.bar) in matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "We'll start by creating some mock data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "xvalues = np.arange(4) + 0.5\n",
    "data = np.arange(1, 5)\n",
    "lower = np.zeros(4)\n",
    "upper = 0.5*np.ones(4)\n",
    "sem = [lower, upper]\n",
    "labels = ['A', 'B', 'C', 'D']\n",
    "edges = ['k']*4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now the plot. Note that there are only upper bounds on the error bars because zeros were passed for the lower values by defining sem as a list with two sets of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa518e31748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(xvalues, data, yerr=sem, tick_label=labels,\n",
    "        color='y', edgecolor=edges, capsize=10)\n",
    "plt.xlabel('condition')\n",
    "plt.ylabel('value')\n",
    "plt.title('Demo');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multibar graphs\n",
    "\n",
    "Here is a function that returns a multi bar graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def multi_bar_plot(data, labels=None, errors=None, capsize=20):\n",
    "    ''' make a multiple bar plot\n",
    "\n",
    "    data: list of values\n",
    "    labels: list of x_axis labels\n",
    "    err: list of values for error bars\n",
    "\n",
    "    '''\n",
    "    fig = plt.figure()\n",
    "    bars = len(data)\n",
    "    width = 1/(bars + 1)\n",
    "    x = np.arange(len(data[0])) - width*(bars-1)/2\n",
    "    if labels is None:\n",
    "        labels = np.arange(len(data[0]))\n",
    "\n",
    "    if errors is None:\n",
    "        for heights in data:\n",
    "            plt.bar(x, heights, width=width)\n",
    "            x += width\n",
    "    else:\n",
    "        for heights, err in zip(data, errors):\n",
    "            plt.bar(x, heights, width=width, yerr=err, capsize=capsize/bars)\n",
    "            x += width\n",
    "\n",
    "    if labels is not None:\n",
    "        plt.xticks(np.arange(len(data[0])), labels)\n",
    "    else:\n",
    "        plt.xticks(np.arange(len(data[0])))\n",
    "\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And some data to test it ...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nPEk/iIhHIuKopC9KWl9uWQCATooE95mSftxy/7H8MQBABRwRx9/Afpuk34uIP83vv1PSeRHxvmO2\nG5c0nt89W9L3e19u36yQdKjqIhJF704O/TtxqffuUESsLbJh14sFq3mE/dKW+y+R9PixG0XEhKSJ\nQuUtcLYnI6JWdR0poncnh/6duEHqXZGhkvskvdz2WbZPlXSJpC+XWxYAoJOuR9wR8aztLZL+VdIS\nSZ+JiIdKrwwA0FaRoRJFxNckfa3kWhaSRTHkUxF6d3Lo34kbmN51/XASALCwcMo7ACRmYIPb9lMF\ntrnc9n7b223Xbb++H7UtBraHbV9WdR0Lke2v2R7usk3D9i99Q8L2ObYvLq86pGBgg7ugyyRdHBGb\nJNUlEdzFDavZv8LctKjfk7Yt6S0RceQEd3GOpIEPbtuFPp9brBb1L0lRtv/c9n22v2P7yvyxT0l6\nmaQv2/6gpPdI+qDtvbbfUGW9/WD70rwfD9r+nO0R2zfmfbrP9up8u8z2Z/IjxEdsX57v4mOSfiPv\n18fzbdv1eWX+V801ku7X3HMGFoU2r/E52yvydR+x/bDt223vsP2hlqe+zfa3bf+77TfkX8f9S0lv\nz/v69gpeTt+0eQ9ea/sTtu+U9De2z7P9DdsP5D/Pzp/36bw/e21P2d6aP399y763235rZS/uZEXE\nQN4kPZX/fLOan0ZbzX/Ivirpjfm6A5JW5MuZpA9VXXefevObap75Ov3aXyTpC5LW5PfHJO1v6cs3\nJP2KmmeuHZZ0iqSVkva17LNtn/Pt/k/Sa6t+3SX2c85rnH5fSapJ2ivp+ZLOkPQf0+8xSQ1Jf58v\nXyzp6/nyuyRdVfVrqug9eG3+vlmSP/ZCSUvz5Qsl3XjMPn5d0sP5z/Ml/Uv++DJJP5x+boq3gf5z\nI/fm/PZAfv90SS+XdHdlFVXvAkk3RMQhSYqIn9m+UNKrmn/pS5JeaPuMfHlXRDwj6RnbT0gabbPP\nTn3+kaRHI+Jb5byUBaPda1wj6eaI+F9Jsv2VY9bflP/co2b4D5J270FJ+lJEPJdvs0zSNtsvlxRq\nHjBIkmwPSfqSpC0R8aikR21fbfvFkv5AzZB/tn8vp7cI7uYR4Ecj4p+qLmQBsZq/CK2eJ+l10yEz\ns2Hzl+mZloeeU/v3Vds+214p6b9PrtwktHuNbvNYq+m+durpYtbuPSjN7eNfSbozIjbk76NGy7pP\nSbopIr7e8tjnJG1S8+zvd/ey2H5jjLt5Rui7bZ8uSbbPzP9VPtYv1PxzdhD8m6Q/sr1ckmy/SNJt\nkrZMb2D7nC77OLZfRfs8SHZL+n3bQ3lf1hV4zqC8D9u9B4+1TNJP8uV3TT9o+72SzoiIjx2z/bWS\nPiBJkfjZ3wMf3BFxm5rjt9+0/V1JN6j9L8ZXJG0YhA8n8zf1X0u6y/aDkj4h6XJJtfzDou+p+WHt\n8fZxWNI9tvfZ/vg8+jwwIuI+Nef9eVDNYZFJSU92edqdag5ZLeoPJzu8B4/1t5I+avseNafjmPYh\nSataPqB8T77Pg5L2S/psudWXjzMngQrZPj0inrJ9mpqfq4xHxP1V17UY5T3+rqTXRES3fyAXtIE/\n4gYqNmF7r5pfE7yR0C5H/uH6w5L+MfXQljjiBoDkcMQNAIkhuAEgMQQ3ACSG4AaAxBDcAJAYghsA\nEvP/zyTiAx7IXDgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xa5190eb630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data1 = np.arange(4) + 1\n",
    "data2 = data1 + 1\n",
    "data3 = data2 + 1\n",
    "data4 = data3 + 1\n",
    "data5 = data4 + 1\n",
    "data = [data1, data2, data3, data4, data5]\n",
    "error1 = np.asarray([0.5]*len(data1))\n",
    "error0 = np.zeros_like(data1)\n",
    "temp = [error0, error1]\n",
    "err = [temp]*len(data)\n",
    "labels = ['left', 'center', 'right', 'crazy']\n",
    "fig = multi_bar_plot(data, labels, err);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
