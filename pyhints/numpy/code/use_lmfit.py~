# -*- coding: utf-8 -*-

from __future__ import print_function
from __future__ import division

import numpy as np
import lmfit as lmf
import matplotlib.pyplot as plt


def peval(x, p):
    A = p['A'].value
    k = p['k'].value
    theta = p['theta'].value

    return A * np.sin((2 * np.pi * k * x) + theta)


def residuals(p, y, x):
    err = y - peval(x, p)
    return err


def print_params(params):
    for name, param in params.items():
        print(name, "=", param.value)

if __name__ == '__main__':
    x = np.arange(0, 6e-2, 6e-2 / 30)

    p = lmf.Parameters()
    p.add('A', value=10)
    p.add('k', value=1/3.2e-2)
    p.add('theta', value=np.pi/6)
    y_true = peval(x, p)
    y_meas = y_true + 2 * np.random.randn(len(x))

    p0 = lmf.Parameters()
    p0.add('A', value=8, min=5, max=15)
    p0.add('k', value=1/2.3e-2, min=20, max=40)
    p0.add('theta', value=np.pi/3, min=0, max=2*np.pi)

    print("initial guess")
    print_params(p0)

    plsq = lmf.minimize(residuals, p0, args=(y_meas, x), method='CG')
    print(plsq.success, plsq.message, plsq.lmdif_message)
    print()
    print("fitted parameters")
    print_params(p0)
    print()
    print("True parameters")
    print_params(p)

    plt.plot(x, peval(x, p0), x, y_meas, 'o', x, y_true)
    plt.title('lmfit Least-squares fit to noisy data')
    plt.legend(['Fit', 'Noisy', 'True'])
    plt.show()
